import{N as j}from"./NlpTemplate-cXuTvVok.js";import{j as d}from"./jsx-runtime-B-bwlRv9.js";import{r as y}from"./iframe-DvXtawEz.js";import{u as I,c as L,P as e}from"./componentUtils-uB8ei2M8.js";import"./TransitionGroupContext-B5V9dr0P.js";import"./preload-helper-PPVm8Dsz.js";const u={LIGHTGREY:"lightgrey",BLUE:"blue"},w="_container_rjeka_1",v="_circle_rjeka_6",S="_label_rjeka_60",B={container:w,circle:v,"--disabled":"_--disabled_rjeka_17","--lightgrey":"_--lightgrey_rjeka_20","--checked":"_--checked_rjeka_39",label:S},p=L.bind(B),D={[u.LIGHTGREY]:"--lightgrey",[u.BLUE]:"--blue"},G="--blue",i=y.forwardRef(({className:n,checked:o,setChecked:l,label:_,disabled:c,onChange:k,onClick:C,controlled:R=!1,dataTestId:g,dataId:q,color:N=u.BLUE,...f},T)=>{const b=D[N]||G,[a,h]=I(o,l,!1),x=({nativeEvent:E})=>{c||(C?.(E),R||(k?.(!a),h(!a)))};return y.useEffect(()=>{h(o)},[o,q]),d.jsxs("div",{ref:T,...f,"data-testid":g,"data-checked":a,"data-disabled":c,className:p("container",n),onClick:x,children:[d.jsx("div",{...f,"data-testid":g,"data-checked":a,className:p("circle","aquiRadio__circle",b,{"--disabled":c,"--checked":a})}),d.jsx("div",{className:p("label","aquiRadio__label",b),"data-testid":"radioLabel",children:_})]})}),U={checked:e.bool,setChecked:e.func,disabled:e.bool,className:e.string,label:e.string,onChange:e.func,onClick:e.func,controlled:e.bool,dataTestId:e.string,dataId:e.string,color:(n,o)=>{const l=n[o];if(l&&!["lightgrey","blue"].includes(l))return new Error("Invalid prop 'color' supplied to Button, expected one of: 'lightgrey'|'darkgrey'|'blue'")}};i.propTypes=U;i.__docgenInfo={description:"",methods:[],displayName:"Radio",props:{controlled:{defaultValue:{value:"false",computed:!1},description:`@prop {bool}
A controlled component will not manage its state and will only be used for display
defaults to false`,type:{name:"bool"},required:!1},color:{defaultValue:{value:"'blue'",computed:!1},description:`@prop {'lightgrey' | 'darkgrey' | 'blue'} color

defaults to 'blue'`,type:{name:"custom",raw:`(props, propName) => {
  const color = props[propName];
  if (color && !["lightgrey", "blue"].includes(color)) {
    return new Error(
      \`Invalid prop 'color' supplied to Button, expected one of: 'lightgrey'|'darkgrey'|'blue'\`
    );
  }
}`},required:!1},checked:{description:"@prop {bool} checked",type:{name:"bool"},required:!1},setChecked:{description:"@prop {func} setChecked state setter",type:{name:"func"},required:!1},disabled:{description:"@prop {bool} disabled",type:{name:"bool"},required:!1},className:{description:`@prop {string} className
@note className is placed on outer container
inner global classes: ['aquiRadio__circle', 'aquiRadio__label']`,type:{name:"string"},required:!1},label:{description:"@prop {string} label",type:{name:"string"},required:!1},onChange:{description:`@prop {func} onChange
called with (newVal)`,type:{name:"func"},required:!1},onClick:{description:`@prop {func} onClick on box click,
called with (event)`,type:{name:"func"},required:!1},dataTestId:{description:"@prop {string} dataTestId",type:{name:"string"},required:!1},dataId:{description:`@prop {string} dataId
data identifier, a change in this prop will reset the component's inner state`,type:{name:"string"},required:!1}}};const Y={title:"Radio",component:i,argTypes:{color:{options:["lightgrey","blue"],control:{type:"radio"}}}},m=j(i),r=m.bind({});r.args={};const t=m.bind({});t.args={label:"Thank you, next",checked:!0};const s=m.bind({});s.args={disabled:!0};r.parameters={...r.parameters,docs:{...r.parameters?.docs,source:{originalSource:"NlpTemplate(Radio)",...r.parameters?.docs?.source}}};t.parameters={...t.parameters,docs:{...t.parameters?.docs,source:{originalSource:"NlpTemplate(Radio)",...t.parameters?.docs?.source}}};s.parameters={...s.parameters,docs:{...s.parameters?.docs,source:{originalSource:"NlpTemplate(Radio)",...s.parameters?.docs?.source}}};const F=["Default","WithLabel","Disabled"];export{r as Default,s as Disabled,t as WithLabel,F as __namedExportsOrder,Y as default};
